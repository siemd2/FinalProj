@page "/technicianworkschedule"
@using System.Diagnostics
@using FinalProj.Data.Models
@using FinalProj.Data.Controllers
@using FinalProj.Data
@using Microsoft.Maui.Controls
@inject DataAccessLayer DAL
@inject WorkBooking wb
<!--
/*
 * This is the Technician Task Management System page for the application.
 * It allows users to book tasks for technicians, and mark tasks as completed.
 */
-->
<h3>Techinician Task Management System</h3>
<br />
<br />
<h4>To Do Tasks:</h4>
<select class="form-select" @bind="SelectedTaskId" aria-label="Default select example">
	<option selected disabled value="">Choose Task</option>
	@foreach (var task in tasksToDo)
	{
		<option value="@task.TicketId">@task.Service.Name</option>
	}
</select>
<br />
<select @bind="StaffId" class="form-select" aria-label="Default select example">
	<!-- disabled option to prevent errors-->
	<option selected disabled value="">Choose Staff ID:</option>
	@foreach (var staff in staffMembers)
	{
		<option value="@staff.UserId">@staff.UserId - @staff.UserName</option>
	}
</select>
<br />
<button type="button" class="btn btn-outline-primary" @onclick="BookTask">Book Task</button>
<br />
<br />
<br />
<br />

<style>
	hr {
	border: none;
	border-top: 3px solid black;
	margin: 20px 0;
	}
</style>

<hr>


<h4>In Progress Tasks:</h4>
<select class="form-select" @bind="SelectedInProgressTask" aria-label="Default select example">
	<option selected disabled value="">Choose Task</option>
	@foreach (var task in tasksInProgress)
	{
		<option value="@task.TicketId">@task.Service.Name</option>
	}
</select>
<br />
<div class="input-group">
	<span class="input-group-text">Staff ID:</span>
	<input type="text" value="@StaffId" class="form-control" readonly />
</div>
<br />
<button type="button" class="btn btn-outline-success" @onclick="CompleteTask">Task Complete</button>
<br />
<br />
<br />
<br />

@code {
	/*
	* The @code block contains the properties and methods related to
	* managing tasks for technicians, booking tasks, and marking tasks as completed.
	*/
	// Data properties
	int? StaffId { get; set; }
	int? SelectedTaskId { get; set; }
	int? SelectedInProgressTask { get; set; }

	List<Staff> staffMembers = new List<Staff>();
	List<WorkTicket> tasksToDo = new List<WorkTicket>();
	List<WorkTicket> tasksInProgress = new List<WorkTicket>();

	DataAccessLayer dataAccessLayer = new DataAccessLayer();
	WorkScheduling ws = new WorkScheduling();

	protected override void OnInitialized()
	{
		try
		{
			staffMembers = dataAccessLayer.GetAllStaff();
			tasksToDo = ws.QueryAllWorkTicket();
		}
		catch (Exception e)
		{
			Application.Current.MainPage.DisplayAlert("No Item Found", "There were no item found in the database", "OK");
		}
		// Log the data to the console
		Debug.WriteLine("Number of tasks: " + tasksToDo.Count);
		foreach (var task in tasksToDo)
		{
			Debug.WriteLine("Task ID: " + task.TicketId + ", Service Name: " + task.Service.Name);
		}

		// force the refresh
		StateHasChanged();
	}

	public void BookTask()
	{
		if (SelectedTaskId.HasValue && StaffId.HasValue)
		{


			WorkTicket selectedTask = tasksToDo.FirstOrDefault(t => t.TicketId == SelectedTaskId.Value);
			if (selectedTask != null)
			{
				tasksToDo.Remove(selectedTask);
				tasksInProgress.Add(selectedTask);
				StateHasChanged(); // trigger re-rerender
			}			
		}
	}

	public void CompleteTask()
	{
		if (SelectedInProgressTask.HasValue)
		{
			WorkTicket selectedTask = tasksInProgress.FirstOrDefault(t => t.TicketId == SelectedInProgressTask.Value);
			if (selectedTask != null)
			{
				tasksInProgress.Remove(selectedTask);
				StaffId = null;
				StateHasChanged(); // trigger re-rerender
			}
		}
	}
}
